def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.apptuns.checkmybike"
        minSdkVersion 21
        targetSdkVersion 31
        compileSdkVersion 31
        versionCode 2
        versionName "1.0.1"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFile 'proguard-rules.pro'
            resValue "string", "versionName", "Check my bike android \nBuild version " + defaultConfig.getVersionName()
        }

        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            resValue "string", "versionName", "Check my bike android \nBuild version " + defaultConfig.getVersionName()
        }
    }

    signingConfigs {
        debug {
            storeFile file(localProperties.getProperty("key.path"))
            storePassword "${localProperties.getProperty("key.password")}"
            keyAlias "${localProperties.getProperty("key.alias")}"
            keyPassword "${localProperties.getProperty("key.password")}"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
